import React, { useState } from 'react';

const App = () => {
  const [fileName, setFileName] = useState('');
  const [fileContent, setFileContent] = useState('');
  const [fileHandle, setFileHandle] = useState(null);
  const [showEditor, setShowEditor] = useState(false); // State to control the display of the editor popup
  const [editorContent, setEditorContent] = useState(''); // State for content in the editor

  // Function to handle file selection (upload)
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => {
        setFileContent(reader.result);
        setFileName(file.name);
      };
      reader.readAsText(file);
    }
  };

  // Function to save the file in a user-selected directory
  const saveFile1 = async () => {
    try {
      // Prompt user to select a file for saving
      const fileHandle = await window.showSaveFilePicker({
        suggestedName: fileName || 'newfile.txt',
        types: [
          {
            description: 'All Files',
            accept: {
              '*/*': [] // Accept all files
            }
          }
        ]
      });

      const writable = await fileHandle.createWritable();
      await writable.write(fileContent);
      await writable.close();

      alert(`File saved successfully as ${fileHandle.name}`);
      setFileName(fileHandle.name);
    } catch (err) {
      console.error('Error saving file:', err);
      alert('Failed to save file. Please ensure the location is accessible and that you have the necessary permissions.');
    }
  };

  // Function to handle file selection (open)
  const openFile = async () => {
    try {
      // Prompt user to choose a file
      const [handle] = await window.showOpenFilePicker({
        types: [
          {
            description: 'All Files',
            accept: {
              '*/*': [] // Accept all files
            }
          }
        ],
        multiple: false,
      });

      // Get the file
      const file = await handle.getFile();
      const content = await file.text();

      // Set state and show the editor
      setFileHandle(handle);
      setFileName(file.name);
      setEditorContent(content);
      setShowEditor(true);
    } catch (err) {
      console.error('Error opening file:', err);
      alert('Failed to open file. Ensure the location is accessible and that you have the necessary permissions.');
    }
  };

  // Function to save the file with the modified content
  const saveFile = async () => {
    if (!fileHandle) {
      alert('No file handle found. Please open a file first.');
      return;
    }

    try {
      const writable = await fileHandle.createWritable();
      await writable.write(editorContent);
      await writable.close();

      alert(`File saved successfully as ${fileHandle.name}`);
      setFileName(fileHandle.name);
      setShowEditor(false);
    } catch (err) {
      console.error('Error saving file:', err);
      alert('Failed to save file. Please ensure the location is accessible and that you have the necessary permissions.');
    }
  };

  // Function to handle content change in the editor
  const handleEditorChange = (event) => {
    setEditorContent(event.target.value);
  };

  return (
    <div>
      <h1>File System Access API - Save and Open</h1>
      <input type="file" onChange={handleFileUpload} />
      <br />
      <button onClick={saveFile1}>Save File</button>
      <button onClick={openFile}>Open File</button>
      <br />
      {fileName && <p>Selected file: {fileName}</p>}
      {/* Display the editor modal if showEditor is true */}
      {showEditor && (
        <div className="editor-popup">
          <textarea 
            value={editorContent} 
            onChange={handleEditorChange} 
            rows="10" 
            cols="30"
          />
          <br />
          <button onClick={saveFile}>Save</button>
          <button onClick={() => setShowEditor(false)}>Cancel</button>
        </div>
      )}
    </div>
  );
};

export default App;
